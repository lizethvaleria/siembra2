/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import firebase from 'firebase';
import 'firebase/database';
import 'firebase/firestore';
import 'firebase/storage';
import type { app } from 'firebase-admin';
declare const firestore: typeof firebase.firestore, database: typeof firebase.database, storage: typeof firebase.storage;
export { firestore, database, storage };
export declare type Provider = 'custom' | 'email' | 'password' | 'phone' | 'anonymous' | 'google.com' | 'facebook.com' | 'github.com' | 'twitter.com' | 'microsoft.com' | 'apple.com';
export declare type FirebaseIdToken = {
    iss: string;
    aud: string;
    sub: string;
    iat: number;
    exp: number;
    user_id: string;
    auth_time: number;
    provider_id?: 'anonymous';
    email?: string;
    email_verified?: boolean;
    phone_number?: string;
    name?: string;
    picture?: string;
    firebase: {
        sign_in_provider: Provider;
        identities?: {
            [provider in Provider]?: string[];
        };
    };
    [claim: string]: any;
};
export declare type TokenOptions = Partial<FirebaseIdToken> & {
    uid?: string;
};
/**
 * Host/port configuration for applicable Firebase Emulators.
 */
export declare type FirebaseEmulatorOptions = {
    firestore?: {
        host: string;
        port: number;
    };
    database?: {
        host: string;
        port: number;
    };
    storage?: {
        host: string;
        port: number;
    };
    hub?: {
        host: string;
        port: number;
    };
};
export declare function apps(): firebase.app.App[];
export declare type AppOptions = {
    databaseName?: string;
    projectId?: string;
    storageBucket?: string;
    auth?: TokenOptions;
};
/** Construct an App authenticated with options.auth. */
export declare function initializeTestApp(options: AppOptions): firebase.app.App;
export declare type AdminAppOptions = {
    databaseName?: string;
    projectId?: string;
    storageBucket?: string;
};
/** Construct an App authenticated as an admin user. */
export declare function initializeAdminApp(options: AdminAppOptions): app.App;
/**
 * Set the host and port configuration for applicable emulators. This will override any values
 * found in environment variables. Must be called before initializeAdminApp or initializeTestApp.
 *
 * @param options options object.
 */
export declare function useEmulators(options: FirebaseEmulatorOptions): void;
/**
 * Use the Firebase Emulator hub to discover other running emulators. Call useEmulators() with
 * the result to configure the library to use the discovered emulators.
 *
 * @param hubHost the host where the Emulator Hub is running (ex: 'localhost')
 * @param hubPort the port where the Emulator Hub is running (ex: 4400)
 */
export declare function discoverEmulators(hubHost?: string, hubPort?: number): Promise<FirebaseEmulatorOptions>;
export declare type LoadDatabaseRulesOptions = {
    databaseName: string;
    rules: string;
};
export declare function loadDatabaseRules(options: LoadDatabaseRulesOptions): Promise<void>;
export declare type LoadFirestoreRulesOptions = {
    projectId: string;
    rules: string;
};
export declare function loadFirestoreRules(options: LoadFirestoreRulesOptions): Promise<void>;
export declare type LoadStorageRulesOptions = {
    rules: string;
};
export declare function loadStorageRules(options: LoadStorageRulesOptions): Promise<void>;
export declare type ClearFirestoreDataOptions = {
    projectId: string;
};
export declare function clearFirestoreData(options: ClearFirestoreDataOptions): Promise<void>;
/**
 * Run a setup function with background Cloud Functions triggers disabled. This can be used to
 * import data into the Realtime Database or Cloud Firestore emulator without triggering locally
 * emulated Cloud Functions.
 *
 * This method only works with Firebase CLI version 8.13.0 or higher.
 *
 * @param fn an function which returns a promise.
 */
export declare function withFunctionTriggersDisabled<TResult>(fn: () => TResult | Promise<TResult>): Promise<TResult>;
export declare function assertFails(pr: Promise<any>): any;
export declare function assertSucceeds(pr: Promise<any>): any;
