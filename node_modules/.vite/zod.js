import "./chunk-HC4Q5QIB.js";

// node_modules/zod/lib/index.mjs
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
    to[j] = from[i];
  return to;
}
var INVALID = Object.freeze({ invalid_data: true });
var util;
(function(util2) {
  function assertNever(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = function(items) {
    var e_1, _a;
    var obj = {};
    try {
      for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
        var item = items_1_1.value;
        obj[item] = item;
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (items_1_1 && !items_1_1.done && (_a = items_1.return))
          _a.call(items_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return obj;
  };
  util2.getValidEnumValues = function(obj) {
    var e_2, _a;
    var validKeys = Object.keys(obj).filter(function(k2) {
      return typeof obj[obj[k2]] !== "number";
    });
    var filtered = {};
    try {
      for (var validKeys_1 = __values(validKeys), validKeys_1_1 = validKeys_1.next(); !validKeys_1_1.done; validKeys_1_1 = validKeys_1.next()) {
        var k = validKeys_1_1.value;
        filtered[k] = obj[k];
      }
    } catch (e_2_1) {
      e_2 = { error: e_2_1 };
    } finally {
      try {
        if (validKeys_1_1 && !validKeys_1_1.done && (_a = validKeys_1.return))
          _a.call(validKeys_1);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
    return util2.getValues(filtered);
  };
  util2.getValues = function(obj) {
    return Object.keys(obj).map(function(e) {
      return obj[e];
    });
  };
  util2.objectValues = function(obj) {
    return Object.keys(obj).map(function(e) {
      return obj[e];
    });
  };
  util2.find = function(arr, checker) {
    var e_3, _a;
    try {
      for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
        var item = arr_1_1.value;
        if (checker(item))
          return item;
      }
    } catch (e_3_1) {
      e_3 = { error: e_3_1 };
    } finally {
      try {
        if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return))
          _a.call(arr_1);
      } finally {
        if (e_3)
          throw e_3.error;
      }
    }
    return void 0;
  };
})(util || (util = {}));
var ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "custom",
  "invalid_union",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types"
]);
var quotelessJson = function(obj) {
  var json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};
var ZodError = function(_super) {
  __extends(ZodError2, _super);
  function ZodError2(issues) {
    var _newTarget = this.constructor;
    var _this = _super.call(this) || this;
    _this.issues = [];
    _this.format = function() {
      var fieldErrors = { _errors: [] };
      var processError = function(error) {
        var e_1, _a;
        try {
          for (var _b = __values(error.issues), _c = _b.next(); !_c.done; _c = _b.next()) {
            var issue = _c.value;
            if (issue.code === "invalid_union") {
              issue.unionErrors.map(processError);
            } else if (issue.code === "invalid_return_type") {
              processError(issue.returnTypeError);
            } else if (issue.code === "invalid_arguments") {
              processError(issue.argumentsError);
            } else if (issue.path.length === 0) {
              fieldErrors._errors.push(issue.message);
            } else {
              var curr = fieldErrors;
              var i = 0;
              while (i < issue.path.length) {
                var el = issue.path[i];
                var terminal = i === issue.path.length - 1;
                if (!terminal) {
                  if (typeof el === "string") {
                    curr[el] = curr[el] || { _errors: [] };
                  } else if (typeof el === "number") {
                    var errorArray = [];
                    errorArray._errors = [];
                    curr[el] = curr[el] || errorArray;
                  }
                } else {
                  curr[el] = curr[el] || { _errors: [] };
                  curr[el]._errors.push(issue.message);
                }
                curr = curr[el];
                i++;
              }
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      };
      processError(_this);
      return fieldErrors;
    };
    _this.addIssue = function(sub) {
      _this.issues = __spreadArray(__spreadArray([], __read(_this.issues)), [sub]);
    };
    _this.addIssues = function(subs) {
      if (subs === void 0) {
        subs = [];
      }
      _this.issues = __spreadArray(__spreadArray([], __read(_this.issues)), __read(subs));
    };
    _this.flatten = function() {
      var e_2, _a;
      var fieldErrors = {};
      var formErrors = [];
      try {
        for (var _b = __values(_this.issues), _c = _b.next(); !_c.done; _c = _b.next()) {
          var sub = _c.value;
          if (sub.path.length > 0) {
            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
            fieldErrors[sub.path[0]].push(sub.message);
          } else {
            formErrors.push(sub.message);
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      return { formErrors, fieldErrors };
    };
    var actualProto = _newTarget.prototype;
    Object.setPrototypeOf(_this, actualProto);
    _this.issues = issues;
    return _this;
  }
  Object.defineProperty(ZodError2.prototype, "errors", {
    get: function() {
      return this.issues;
    },
    enumerable: false,
    configurable: true
  });
  ZodError2.prototype.toString = function() {
    return "ZodError: " + JSON.stringify(this.issues, null, 2);
  };
  Object.defineProperty(ZodError2.prototype, "message", {
    get: function() {
      return JSON.stringify(this.issues, null, 2);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ZodError2.prototype, "isEmpty", {
    get: function() {
      return this.issues.length === 0;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ZodError2.prototype, "formErrors", {
    get: function() {
      return this.flatten();
    },
    enumerable: false,
    configurable: true
  });
  ZodError2.create = function(issues) {
    var error = new ZodError2(issues);
    return error;
  };
  return ZodError2;
}(Error);
var defaultErrorMap = function(error, _ctx) {
  var message;
  switch (error.code) {
    case ZodIssueCode.invalid_type:
      if (error.received === "undefined") {
        message = "Required";
      } else {
        message = "Expected " + error.expected + ", received " + error.received;
      }
      break;
    case ZodIssueCode.unrecognized_keys:
      message = "Unrecognized key(s) in object: " + error.keys.map(function(k) {
        return "'" + k + "'";
      }).join(", ");
      break;
    case ZodIssueCode.invalid_union:
      message = "Invalid input";
      break;
    case ZodIssueCode.invalid_enum_value:
      message = "Invalid enum value. Expected " + error.options.map(function(val) {
        return typeof val === "string" ? "'" + val + "'" : val;
      }).join(" | ") + ", received " + (typeof _ctx.data === "string" ? "'" + _ctx.data + "'" : _ctx.data);
      break;
    case ZodIssueCode.invalid_arguments:
      message = "Invalid function arguments";
      break;
    case ZodIssueCode.invalid_return_type:
      message = "Invalid function return type";
      break;
    case ZodIssueCode.invalid_date:
      message = "Invalid date";
      break;
    case ZodIssueCode.invalid_string:
      if (error.validation !== "regex")
        message = "Invalid " + error.validation;
      else
        message = "Invalid";
      break;
    case ZodIssueCode.too_small:
      if (error.type === "array")
        message = "Should have " + (error.inclusive ? "at least" : "more than") + " " + error.minimum + " items";
      else if (error.type === "string")
        message = "Should be " + (error.inclusive ? "at least" : "over") + " " + error.minimum + " characters";
      else if (error.type === "number")
        message = "Value should be greater than " + (error.inclusive ? "or equal to " : "") + error.minimum;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (error.type === "array")
        message = "Should have " + (error.inclusive ? "at most" : "less than") + " " + error.maximum + " items";
      else if (error.type === "string")
        message = "Should be " + (error.inclusive ? "at most" : "under") + " " + error.maximum + " characters long";
      else if (error.type === "number")
        message = "Value should be less than " + (error.inclusive ? "or equal to " : "") + error.maximum;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = "Invalid input";
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = "Intersections only support objects";
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(error);
  }
  return { message };
};
var overrideErrorMap = defaultErrorMap;
var setErrorMap = function(map) {
  overrideErrorMap = map;
};
var ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
var getParsedType = function(data) {
  if (typeof data === "string")
    return ZodParsedType.string;
  if (typeof data === "number") {
    if (Number.isNaN(data))
      return ZodParsedType.nan;
    return ZodParsedType.number;
  }
  if (typeof data === "boolean")
    return ZodParsedType.boolean;
  if (typeof data === "bigint")
    return ZodParsedType.bigint;
  if (typeof data === "symbol")
    return ZodParsedType.symbol;
  if (data instanceof Date)
    return ZodParsedType.date;
  if (typeof data === "function")
    return ZodParsedType.function;
  if (data === void 0)
    return ZodParsedType.undefined;
  if (typeof data === "undefined")
    return ZodParsedType.undefined;
  if (typeof data === "object") {
    if (Array.isArray(data))
      return ZodParsedType.array;
    if (data === null)
      return ZodParsedType.null;
    if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
      return ZodParsedType.promise;
    }
    if (data instanceof Map) {
      return ZodParsedType.map;
    }
    if (data instanceof Set) {
      return ZodParsedType.set;
    }
    return ZodParsedType.object;
  }
  return ZodParsedType.unknown;
};
var issueHelpers = function(error, params) {
  var makeIssue = function(errorData) {
    var errorArg = __assign(__assign({}, errorData), { path: __spreadArray(__spreadArray([], __read(params.path)), __read(errorData.path || [])) });
    var defaultError = defaultErrorMap(errorArg, {
      data: params.data,
      defaultError: "Invalid input"
    });
    var issue = __assign(__assign({}, errorData), { path: __spreadArray(__spreadArray([], __read(params.path)), __read(errorData.path || [])), message: errorData.message || params.errorMap(errorArg, {
      data: params.data,
      defaultError: defaultError.message
    }).message });
    return issue;
  };
  var addIssue = function(errorData) {
    var issue = makeIssue(errorData);
    error.addIssue(issue);
  };
  return {
    makeIssue,
    addIssue
  };
};
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = function(message) {
    return typeof message === "string" ? { message } : message || {};
  };
  errorUtil2.toString = function(message) {
    return typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
  };
})(errorUtil || (errorUtil = {}));
var NOSET = Object.freeze({ no_set: true });
var PseudoPromise = function() {
  function PseudoPromise2(funcs) {
    var _this = this;
    if (funcs === void 0) {
      funcs = [];
    }
    this.all = function(func) {
      return _this.then(function(arg, ctx) {
        var pps = func(arg, ctx);
        if (ctx.async) {
          var allValues = Promise.all(pps.map(function(pp) {
            return __awaiter(_this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, pp.getValueAsync()];
                  case 1:
                    return [2, _a.sent()];
                  case 2:
                    _a.sent();
                    return [2, INVALID];
                  case 3:
                    return [2];
                }
              });
            });
          })).then(function(vals) {
            return vals;
          });
          return allValues;
        } else {
          return pps.map(function(pp) {
            return pp.getValueSync();
          });
        }
      });
    };
    this.then = function(func) {
      return new PseudoPromise2(__spreadArray(__spreadArray([], __read(_this.items)), [
        { type: "function", function: func }
      ]));
    };
    this.catch = function(catcher) {
      return new PseudoPromise2(__spreadArray(__spreadArray([], __read(_this.items)), [
        { type: "catcher", catcher }
      ]));
    };
    this.getValueSync = function() {
      var val = void 0;
      var _loop_1 = function(index2) {
        try {
          var item = _this.items[index2];
          if (item.type === "function") {
            val = item.function(val, { async: false });
          }
        } catch (err) {
          var catcherIndex = _this.items.findIndex(function(x, i) {
            return x.type === "catcher" && i > index2;
          });
          var catcherItem = _this.items[catcherIndex];
          if (!catcherItem || catcherItem.type !== "catcher") {
            throw err;
          } else {
            index2 = catcherIndex;
            val = catcherItem.catcher(err, { async: false });
          }
        }
        out_index_1 = index2;
      };
      var out_index_1;
      for (var index = 0; index < _this.items.length; index++) {
        _loop_1(index);
        index = out_index_1;
      }
      return val;
    };
    this.getValueAsync = function() {
      return __awaiter(_this, void 0, void 0, function() {
        var val, _loop_2, this_1, out_index_2, index;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              val = void 0;
              _loop_2 = function(index2) {
                var item, err_2, catcherIndex, catcherItem;
                return __generator(this, function(_b) {
                  switch (_b.label) {
                    case 0:
                      item = this_1.items[index2];
                      _b.label = 1;
                    case 1:
                      _b.trys.push([1, 4, , 8]);
                      if (!(item.type === "function"))
                        return [3, 3];
                      return [4, item.function(val, { async: true })];
                    case 2:
                      val = _b.sent();
                      _b.label = 3;
                    case 3:
                      return [3, 8];
                    case 4:
                      err_2 = _b.sent();
                      catcherIndex = this_1.items.findIndex(function(x, i) {
                        return x.type === "catcher" && i > index2;
                      });
                      catcherItem = this_1.items[catcherIndex];
                      if (!(!catcherItem || catcherItem.type !== "catcher"))
                        return [3, 5];
                      throw err_2;
                    case 5:
                      index2 = catcherIndex;
                      return [4, catcherItem.catcher(err_2, { async: true })];
                    case 6:
                      val = _b.sent();
                      _b.label = 7;
                    case 7:
                      return [3, 8];
                    case 8:
                      if (val instanceof PseudoPromise2) {
                        throw new Error("ASYNC: DO NOT RETURN PSEUDOPROMISE FROM FUNCTIONS");
                      }
                      if (val instanceof Promise) {
                        throw new Error("ASYNC: DO NOT RETURN PROMISE FROM FUNCTIONS");
                      }
                      out_index_2 = index2;
                      return [2];
                  }
                });
              };
              this_1 = this;
              index = 0;
              _a.label = 1;
            case 1:
              if (!(index < this.items.length))
                return [3, 4];
              return [5, _loop_2(index)];
            case 2:
              _a.sent();
              index = out_index_2;
              _a.label = 3;
            case 3:
              index++;
              return [3, 1];
            case 4:
              return [2, val];
          }
        });
      });
    };
    this.items = funcs;
  }
  PseudoPromise2.all = function(pps) {
    return new PseudoPromise2().all(function() {
      return pps;
    });
  };
  PseudoPromise2.object = function(pps) {
    return new PseudoPromise2().then(function(_arg, ctx) {
      var e_1, _a;
      var value = {};
      var zerr = new ZodError([]);
      if (ctx.async) {
        var getAsyncObject = function() {
          return __awaiter(void 0, void 0, void 0, function() {
            var items2, items_2, items_2_1, item2;
            var e_2, _a2;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  return [4, Promise.all(Object.keys(pps).map(function(k) {
                    return __awaiter(void 0, void 0, void 0, function() {
                      var v, err_3;
                      return __generator(this, function(_a3) {
                        switch (_a3.label) {
                          case 0:
                            _a3.trys.push([0, 2, , 3]);
                            return [4, pps[k].getValueAsync()];
                          case 1:
                            v = _a3.sent();
                            return [2, [k, v]];
                          case 2:
                            err_3 = _a3.sent();
                            if (err_3 instanceof ZodError) {
                              zerr.addIssues(err_3.issues);
                              return [2, [k, INVALID]];
                            }
                            throw err_3;
                          case 3:
                            return [2];
                        }
                      });
                    });
                  }))];
                case 1:
                  items2 = _b.sent();
                  if (!zerr.isEmpty)
                    throw zerr;
                  try {
                    for (items_2 = __values(items2), items_2_1 = items_2.next(); !items_2_1.done; items_2_1 = items_2.next()) {
                      item2 = items_2_1.value;
                      if (item2[1] !== NOSET)
                        value[item2[0]] = item2[1];
                    }
                  } catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                  } finally {
                    try {
                      if (items_2_1 && !items_2_1.done && (_a2 = items_2.return))
                        _a2.call(items_2);
                    } finally {
                      if (e_2)
                        throw e_2.error;
                    }
                  }
                  return [2, value];
              }
            });
          });
        };
        return getAsyncObject();
      } else {
        var items = Object.keys(pps).map(function(k) {
          try {
            var v = pps[k].getValueSync();
            return [k, v];
          } catch (err) {
            if (err instanceof ZodError) {
              zerr.addIssues(err.issues);
              return [k, INVALID];
            }
            throw err;
          }
        });
        if (!zerr.isEmpty)
          throw zerr;
        try {
          for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
            var item = items_1_1.value;
            if (item[1] !== NOSET)
              value[item[0]] = item[1];
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (items_1_1 && !items_1_1.done && (_a = items_1.return))
              _a.call(items_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return value;
      }
    });
  };
  PseudoPromise2.resolve = function(value) {
    if (value instanceof PseudoPromise2) {
      throw new Error("Do not pass PseudoPromise into PseudoPromise.resolve");
    }
    return new PseudoPromise2().then(function() {
      return value;
    });
  };
  return PseudoPromise2;
}();
var ZodType = function() {
  function ZodType2(def) {
    var _this = this;
    this._parseInternalOptionalParams = function(params) {
      var _a;
      var fullParams = {
        data: params.data,
        path: params.path || [],
        parentError: params.parentError || new ZodError([]),
        errorMap: params.errorMap || overrideErrorMap,
        async: (_a = params.async) !== null && _a !== void 0 ? _a : false
      };
      return _this._parseInternal(fullParams);
    };
    this.parse = function(data, params) {
      var result = _this._parseInternalOptionalParams(__assign({ data }, params));
      if (result instanceof Promise)
        throw new Error("You can't use .parse() on a schema containing async elements. Use .parseAsync instead.");
      if (result.success)
        return result.data;
      throw result.error;
    };
    this.safeParse = function(data, params) {
      var result = _this._parseInternalOptionalParams(__assign({ data }, params));
      if (result instanceof Promise)
        throw new Error("You can't use .safeParse() on a schema containing async elements. Use .parseAsync instead.");
      return result;
    };
    this.parseAsync = function(data, params) {
      return __awaiter(_this, void 0, void 0, function() {
        var result;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this._parseInternalOptionalParams(__assign(__assign({ data }, params), { async: true }))];
            case 1:
              result = _a.sent();
              if (result.success)
                return [2, result.data];
              throw result.error;
          }
        });
      });
    };
    this.safeParseAsync = function(data, params) {
      return __awaiter(_this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this._parseInternalOptionalParams(__assign(__assign({ data }, params), { async: true }))];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    this.spa = this.safeParseAsync;
    this._parseWithInvalidFallback = function(data, params) {
      var result = _this._parseInternal(__assign(__assign({}, params), { data }));
      if (result instanceof Promise) {
        return result.then(function(result2) {
          if (result2.success)
            return result2.data;
          return INVALID;
        });
      }
      if (result.success)
        return result.data;
      return INVALID;
    };
    this.refine = function(check, message) {
      if (typeof message === "string" || typeof message === "undefined") {
        return _this._refinement(function(val, ctx) {
          var result = check(val);
          var setError = function() {
            return ctx.addIssue({
              code: ZodIssueCode.custom,
              message
            });
          };
          if (result instanceof Promise) {
            return result.then(function(data) {
              if (!data)
                setError();
            });
          }
          if (!result) {
            setError();
            return result;
          }
        });
      }
      if (typeof message === "function") {
        return _this._refinement(function(val, ctx) {
          var result = check(val);
          var setError = function() {
            return ctx.addIssue(__assign({ code: ZodIssueCode.custom }, message(val)));
          };
          if (result instanceof Promise) {
            return result.then(function(data) {
              if (!data)
                setError();
            });
          }
          if (!result) {
            setError();
            return result;
          }
        });
      }
      return _this._refinement(function(val, ctx) {
        var result = check(val);
        var setError = function() {
          return ctx.addIssue(__assign({ code: ZodIssueCode.custom }, message));
        };
        if (result instanceof Promise) {
          return result.then(function(data) {
            if (!data)
              setError();
          });
        }
        if (!result) {
          setError();
          return result;
        }
      });
    };
    this.refinement = function(check, refinementData) {
      return _this._refinement(function(val, ctx) {
        if (!check(val)) {
          ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        }
      });
    };
    this.superRefine = this._refinement;
    this.optional = function() {
      return ZodOptional.create(_this);
    };
    this.nullable = function() {
      return ZodNullable.create(_this);
    };
    this.nullish = function() {
      return _this.optional().nullable();
    };
    this.array = function() {
      return ZodArray.create(_this);
    };
    this.isOptional = function() {
      return _this.safeParse(void 0).success;
    };
    this.isNullable = function() {
      return _this.safeParse(null).success;
    };
    this._def = def;
    this.transform = this.transform.bind(this);
    this.default = this.default.bind(this);
  }
  ZodType2.prototype._parseInternal = function(params) {
    var data = params.data;
    var PROMISE;
    var ERROR = new ZodError([]);
    var _a = issueHelpers(ERROR, __assign({}, params)), makeIssue = _a.makeIssue, addIssue = _a.addIssue;
    var parsedType = getParsedType(data);
    try {
      var parsedValue = this._parse(__assign(__assign({}, params), {
        currentError: ERROR,
        makeIssue,
        addIssue,
        parsedType
      }));
      PROMISE = parsedValue instanceof PseudoPromise ? parsedValue : PseudoPromise.resolve(parsedValue);
    } catch (err) {
      PROMISE = PseudoPromise.resolve(INVALID);
    }
    var isSync = params.async === false || this instanceof ZodPromise;
    var THROW_ERROR_IF_PRESENT = function(key) {
      return function(data2) {
        if (!ERROR.isEmpty)
          throw ERROR;
        return data2;
      };
    };
    PROMISE = PROMISE.then(THROW_ERROR_IF_PRESENT()).then(function(data2) {
      return { success: true, data: data2 };
    }).catch(function(error) {
      params.parentError.addIssues(ERROR.issues);
      if (error instanceof ZodError)
        return { success: false, error };
      throw error;
    });
    return isSync ? PROMISE.getValueSync() : PROMISE.getValueAsync();
  };
  ZodType2.prototype._refinement = function(refinement) {
    var returnType;
    if (this instanceof ZodEffects) {
      returnType = new ZodEffects(__assign(__assign({}, this._def), { effects: __spreadArray(__spreadArray([], __read(this._def.effects || [])), [
        { type: "refinement", refinement }
      ]) }));
    } else {
      returnType = new ZodEffects({
        schema: this,
        effects: [{ type: "refinement", refinement }]
      });
    }
    return returnType;
  };
  ZodType2.prototype.or = function(option) {
    return ZodUnion.create([this, option]);
  };
  ZodType2.prototype.and = function(incoming) {
    return ZodIntersection.create(this, incoming);
  };
  ZodType2.prototype.transform = function(transform) {
    return new ZodEffects({
      schema: this,
      effects: [{ type: "transform", transform }]
    });
  };
  ZodType2.prototype.default = function(def) {
    var defaultValueFunc = typeof def === "function" ? def : function() {
      return def;
    };
    return new ZodDefault({
      innerType: this,
      defaultValue: defaultValueFunc
    });
  };
  return ZodType2;
}();
var uuidRegex = /^[a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}$/i;
var emailRegex = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
var ZodString = function(_super) {
  __extends(ZodString2, _super);
  function ZodString2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._regex = function(regex, validation, message) {
      return _this.refinement(function(data) {
        return regex.test(data);
      }, __assign({ validation, code: ZodIssueCode.invalid_string }, errorUtil.errToObj(message)));
    };
    _this.email = function(message) {
      return new ZodString2(__assign(__assign({}, _this._def), { checks: __spreadArray(__spreadArray([], __read(_this._def.checks)), [
        __assign({ kind: "email" }, errorUtil.errToObj(message))
      ]) }));
    };
    _this.url = function(message) {
      return new ZodString2(__assign(__assign({}, _this._def), { checks: __spreadArray(__spreadArray([], __read(_this._def.checks)), [
        __assign({ kind: "url" }, errorUtil.errToObj(message))
      ]) }));
    };
    _this.uuid = function(message) {
      return new ZodString2(__assign(__assign({}, _this._def), { checks: __spreadArray(__spreadArray([], __read(_this._def.checks)), [
        __assign({ kind: "uuid" }, errorUtil.errToObj(message))
      ]) }));
    };
    _this.regex = function(regex, message) {
      return new ZodString2(__assign(__assign({}, _this._def), { checks: __spreadArray(__spreadArray([], __read(_this._def.checks)), [
        __assign({ kind: "regex", regex }, errorUtil.errToObj(message))
      ]) }));
    };
    _this.min = function(minLength, message) {
      return new ZodString2(__assign(__assign({}, _this._def), { checks: __spreadArray(__spreadArray([], __read(_this._def.checks)), [
        __assign({ kind: "min", value: minLength }, errorUtil.errToObj(message))
      ]) }));
    };
    _this.max = function(maxLength, message) {
      return new ZodString2(__assign(__assign({}, _this._def), { checks: __spreadArray(__spreadArray([], __read(_this._def.checks)), [
        __assign({ kind: "max", value: maxLength }, errorUtil.errToObj(message))
      ]) }));
    };
    _this.nonempty = function(message) {
      return _this.min(1, errorUtil.errToObj(message));
    };
    return _this;
  }
  ZodString2.prototype._parse = function(ctx) {
    var e_1, _a;
    if (ctx.parsedType !== ZodParsedType.string) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.string,
        received: ctx.parsedType
      });
      return INVALID;
    }
    try {
      for (var _b = __values(this._def.checks), _c = _b.next(); !_c.done; _c = _b.next()) {
        var check = _c.value;
        if (check.kind === "min") {
          if (ctx.data.length < check.value) {
            ctx.addIssue({
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              message: check.message
            });
          }
        } else if (check.kind === "max") {
          if (ctx.data.length > check.value) {
            ctx.addIssue({
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              message: check.message
            });
          }
        } else if (check.kind === "email") {
          if (!emailRegex.test(ctx.data)) {
            ctx.addIssue({
              validation: "email",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
          }
        } else if (check.kind === "uuid") {
          if (!uuidRegex.test(ctx.data)) {
            ctx.addIssue({
              validation: "uuid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
          }
        } else if (check.kind === "url") {
          try {
            new URL(ctx.data);
          } catch (_d) {
            ctx.addIssue({
              validation: "url",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
          }
        } else if (check.kind === "regex") {
          if (!check.regex.test(ctx.data)) {
            ctx.addIssue({
              validation: "regex",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
          }
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return ctx.data;
  };
  ZodString2.prototype.length = function(len, message) {
    return this.min(len, message).max(len, message);
  };
  Object.defineProperty(ZodString2.prototype, "isEmail", {
    get: function() {
      return !!this._def.checks.find(function(ch) {
        return ch.kind === "email";
      });
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ZodString2.prototype, "isURL", {
    get: function() {
      return !!this._def.checks.find(function(ch) {
        return ch.kind === "url";
      });
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ZodString2.prototype, "isUUID", {
    get: function() {
      return !!this._def.checks.find(function(ch) {
        return ch.kind === "uuid";
      });
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ZodString2.prototype, "minLength", {
    get: function() {
      var min = -Infinity;
      this._def.checks.map(function(ch) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min) {
            min = ch.value;
          }
        }
      });
      return min;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ZodString2.prototype, "maxLength", {
    get: function() {
      var max = null;
      this._def.checks.map(function(ch) {
        if (ch.kind === "min") {
          if (max === null || ch.value < max) {
            max = ch.value;
          }
        }
      });
      return max;
    },
    enumerable: false,
    configurable: true
  });
  ZodString2.create = function() {
    return new ZodString2({
      checks: []
    });
  };
  return ZodString2;
}(ZodType);
var ZodNumber = function(_super) {
  __extends(ZodNumber2, _super);
  function ZodNumber2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.min = function(value, message) {
      return new ZodNumber2(__assign(__assign({}, _this._def), { checks: __spreadArray(__spreadArray([], __read(_this._def.checks)), [
        {
          kind: "min",
          value,
          inclusive: true,
          message: errorUtil.toString(message)
        }
      ]) }));
    };
    _this.max = function(value, message) {
      return new ZodNumber2(__assign(__assign({}, _this._def), { checks: __spreadArray(__spreadArray([], __read(_this._def.checks)), [
        {
          kind: "max",
          value,
          inclusive: true,
          message: errorUtil.toString(message)
        }
      ]) }));
    };
    _this.int = function(message) {
      return new ZodNumber2(__assign(__assign({}, _this._def), { checks: __spreadArray(__spreadArray([], __read(_this._def.checks)), [
        {
          kind: "int",
          message: errorUtil.toString(message)
        }
      ]) }));
    };
    _this.positive = function(message) {
      return new ZodNumber2(__assign(__assign({}, _this._def), { checks: __spreadArray(__spreadArray([], __read(_this._def.checks)), [
        {
          kind: "min",
          value: 0,
          inclusive: false,
          message: errorUtil.toString(message)
        }
      ]) }));
    };
    _this.negative = function(message) {
      return new ZodNumber2(__assign(__assign({}, _this._def), { checks: __spreadArray(__spreadArray([], __read(_this._def.checks)), [
        {
          kind: "max",
          value: 0,
          inclusive: false,
          message: errorUtil.toString(message)
        }
      ]) }));
    };
    _this.nonpositive = function(message) {
      return new ZodNumber2(__assign(__assign({}, _this._def), { checks: __spreadArray(__spreadArray([], __read(_this._def.checks)), [
        {
          kind: "max",
          value: 0,
          inclusive: true,
          message: errorUtil.toString(message)
        }
      ]) }));
    };
    _this.nonnegative = function(message) {
      return new ZodNumber2(__assign(__assign({}, _this._def), { checks: __spreadArray(__spreadArray([], __read(_this._def.checks)), [
        {
          kind: "min",
          value: 0,
          inclusive: true,
          message: errorUtil.toString(message)
        }
      ]) }));
    };
    return _this;
  }
  ZodNumber2.prototype._parse = function(ctx) {
    var e_2, _a;
    if (ctx.parsedType !== ZodParsedType.number) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (Number.isNaN(ctx.data)) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ZodParsedType.nan
      });
      return INVALID;
    }
    try {
      for (var _b = __values(this._def.checks), _c = _b.next(); !_c.done; _c = _b.next()) {
        var check = _c.value;
        if (check.kind === "int") {
          if (!Number.isInteger(ctx.data)) {
            ctx.addIssue({
              code: ZodIssueCode.invalid_type,
              expected: "integer",
              received: "float",
              message: check.message
            });
          }
        } else if (check.kind === "min") {
          var tooSmall = check.inclusive ? ctx.data < check.value : ctx.data <= check.value;
          if (tooSmall) {
            ctx.addIssue({
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "number",
              inclusive: check.inclusive,
              message: check.message
            });
          }
        } else if (check.kind === "max") {
          var tooBig = check.inclusive ? ctx.data > check.value : ctx.data >= check.value;
          if (tooBig) {
            ctx.addIssue({
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "number",
              inclusive: check.inclusive,
              message: check.message
            });
          }
        }
      }
    } catch (e_2_1) {
      e_2 = { error: e_2_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
    return ctx.data;
  };
  Object.defineProperty(ZodNumber2.prototype, "minValue", {
    get: function() {
      var e_3, _a;
      var min = null;
      try {
        for (var _b = __values(this._def.checks), _c = _b.next(); !_c.done; _c = _b.next()) {
          var ch = _c.value;
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
      return min;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ZodNumber2.prototype, "maxValue", {
    get: function() {
      var e_4, _a;
      var max = null;
      try {
        for (var _b = __values(this._def.checks), _c = _b.next(); !_c.done; _c = _b.next()) {
          var ch = _c.value;
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
      } catch (e_4_1) {
        e_4 = { error: e_4_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_4)
            throw e_4.error;
        }
      }
      return max;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ZodNumber2.prototype, "isInt", {
    get: function() {
      return !!this._def.checks.find(function(ch) {
        return ch.kind === "int";
      });
    },
    enumerable: false,
    configurable: true
  });
  ZodNumber2.create = function() {
    return new ZodNumber2({
      checks: []
    });
  };
  return ZodNumber2;
}(ZodType);
var ZodBigInt = function(_super) {
  __extends(ZodBigInt2, _super);
  function ZodBigInt2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodBigInt2.prototype._parse = function(ctx) {
    if (ctx.parsedType !== ZodParsedType.bigint) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.bigint,
        received: ctx.parsedType
      });
      return;
    }
    return ctx.data;
  };
  ZodBigInt2.create = function() {
    return new ZodBigInt2({});
  };
  return ZodBigInt2;
}(ZodType);
var ZodBoolean = function(_super) {
  __extends(ZodBoolean2, _super);
  function ZodBoolean2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodBoolean2.prototype._parse = function(ctx) {
    if (ctx.parsedType !== ZodParsedType.boolean) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return;
    }
    return ctx.data;
  };
  ZodBoolean2.create = function() {
    return new ZodBoolean2({});
  };
  return ZodBoolean2;
}(ZodType);
var ZodDate = function(_super) {
  __extends(ZodDate2, _super);
  function ZodDate2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodDate2.prototype._parse = function(ctx) {
    if (ctx.parsedType !== ZodParsedType.date) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx.parsedType
      });
      return;
    }
    if (isNaN(ctx.data.getTime())) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_date
      });
      return;
    }
    return new Date(ctx.data.getTime());
  };
  ZodDate2.create = function() {
    return new ZodDate2({});
  };
  return ZodDate2;
}(ZodType);
var ZodUndefined = function(_super) {
  __extends(ZodUndefined2, _super);
  function ZodUndefined2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodUndefined2.prototype._parse = function(ctx) {
    if (ctx.parsedType !== ZodParsedType.undefined) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return;
    }
    return ctx.data;
  };
  ZodUndefined2.create = function() {
    return new ZodUndefined2({});
  };
  return ZodUndefined2;
}(ZodType);
var ZodNull = function(_super) {
  __extends(ZodNull2, _super);
  function ZodNull2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodNull2.prototype._parse = function(ctx) {
    if (ctx.parsedType !== ZodParsedType.null) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return;
    }
    return ctx.data;
  };
  ZodNull2.create = function() {
    return new ZodNull2({});
  };
  return ZodNull2;
}(ZodType);
var ZodAny = function(_super) {
  __extends(ZodAny2, _super);
  function ZodAny2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodAny2.prototype._parse = function(ctx) {
    return ctx.data;
  };
  ZodAny2.create = function() {
    return new ZodAny2({});
  };
  return ZodAny2;
}(ZodType);
var ZodUnknown = function(_super) {
  __extends(ZodUnknown2, _super);
  function ZodUnknown2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodUnknown2.prototype._parse = function(ctx) {
    return ctx.data;
  };
  ZodUnknown2.create = function() {
    return new ZodUnknown2({});
  };
  return ZodUnknown2;
}(ZodType);
var ZodNever = function(_super) {
  __extends(ZodNever2, _super);
  function ZodNever2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodNever2.prototype._parse = function(ctx) {
    ctx.addIssue({
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return;
  };
  ZodNever2.create = function() {
    return new ZodNever2({});
  };
  return ZodNever2;
}(ZodType);
var ZodVoid = function(_super) {
  __extends(ZodVoid2, _super);
  function ZodVoid2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodVoid2.prototype._parse = function(ctx) {
    if (ctx.parsedType !== ZodParsedType.undefined && ctx.parsedType !== ZodParsedType.null) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return;
    }
    return ctx.data;
  };
  ZodVoid2.create = function() {
    return new ZodVoid2({});
  };
  return ZodVoid2;
}(ZodType);
var parseArray = function(ctx, def) {
  if (ctx.parsedType !== ZodParsedType.array) {
    ctx.addIssue({
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.array,
      received: ctx.parsedType
    });
    return false;
  }
  if (def.minLength !== null) {
    if (ctx.data.length < def.minLength.value) {
      ctx.addIssue({
        code: ZodIssueCode.too_small,
        minimum: def.minLength.value,
        type: "array",
        inclusive: true,
        message: def.minLength.message
      });
    }
  }
  if (def.maxLength !== null) {
    if (ctx.data.length > def.maxLength.value) {
      ctx.addIssue({
        code: ZodIssueCode.too_big,
        maximum: def.maxLength.value,
        type: "array",
        inclusive: true,
        message: def.maxLength.message
      });
    }
  }
  return true;
};
var ZodArray = function(_super) {
  __extends(ZodArray2, _super);
  function ZodArray2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.min = function(minLength, message) {
      return new ZodArray2(__assign(__assign({}, _this._def), { minLength: { value: minLength, message: errorUtil.toString(message) } }));
    };
    _this.max = function(maxLength, message) {
      return new ZodArray2(__assign(__assign({}, _this._def), { maxLength: { value: maxLength, message: errorUtil.toString(message) } }));
    };
    _this.length = function(len, message) {
      return _this.min(len, message).max(len, message);
    };
    _this.nonempty = function() {
      return new ZodNonEmptyArray(__assign({}, _this._def));
    };
    return _this;
  }
  ZodArray2.prototype._parse = function(ctx) {
    var _this = this;
    var result = parseArray(ctx, this._def);
    if (!result)
      return;
    return PseudoPromise.all(ctx.data.map(function(item, i) {
      return new PseudoPromise().then(function() {
        return _this._def.type._parseWithInvalidFallback(item, __assign(__assign({}, ctx), { path: __spreadArray(__spreadArray([], __read(ctx.path)), [i]), parentError: ctx.currentError }));
      });
    }));
  };
  Object.defineProperty(ZodArray2.prototype, "element", {
    get: function() {
      return this._def.type;
    },
    enumerable: false,
    configurable: true
  });
  ZodArray2.create = function(schema) {
    return new ZodArray2({
      type: schema,
      minLength: null,
      maxLength: null
    });
  };
  return ZodArray2;
}(ZodType);
var ZodNonEmptyArray = function(_super) {
  __extends(ZodNonEmptyArray2, _super);
  function ZodNonEmptyArray2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.min = function(minLength, message) {
      return new ZodNonEmptyArray2(__assign(__assign({}, _this._def), { minLength: { value: minLength, message: errorUtil.toString(message) } }));
    };
    _this.max = function(maxLength, message) {
      return new ZodNonEmptyArray2(__assign(__assign({}, _this._def), { maxLength: { value: maxLength, message: errorUtil.toString(message) } }));
    };
    _this.length = function(len, message) {
      return _this.min(len, message).max(len, message);
    };
    return _this;
  }
  ZodNonEmptyArray2.prototype._parse = function(ctx) {
    var _this = this;
    var result = parseArray(ctx, this._def);
    if (!result)
      return;
    if (ctx.data.length < 1) {
      ctx.addIssue({
        code: ZodIssueCode.too_small,
        minimum: 1,
        type: "array",
        inclusive: true
      });
    }
    return PseudoPromise.all(ctx.data.map(function(item, i) {
      return new PseudoPromise().then(function() {
        return _this._def.type._parseWithInvalidFallback(item, __assign(__assign({}, ctx), { path: __spreadArray(__spreadArray([], __read(ctx.path)), [i]), parentError: ctx.currentError }));
      });
    }));
  };
  ZodNonEmptyArray2.create = function(schema) {
    return new ZodNonEmptyArray2({
      type: schema,
      minLength: null,
      maxLength: null
    });
  };
  return ZodNonEmptyArray2;
}(ZodType);
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = function(first, second) {
    return __assign(__assign({}, first), second);
  };
  objectUtil2.intersectShapes = function(first, second) {
    var e_5, _a;
    var firstKeys = Object.keys(first);
    var secondKeys = Object.keys(second);
    var sharedKeys = firstKeys.filter(function(k2) {
      return secondKeys.indexOf(k2) !== -1;
    });
    var sharedShape = {};
    try {
      for (var sharedKeys_1 = __values(sharedKeys), sharedKeys_1_1 = sharedKeys_1.next(); !sharedKeys_1_1.done; sharedKeys_1_1 = sharedKeys_1.next()) {
        var k = sharedKeys_1_1.value;
        sharedShape[k] = ZodIntersection.create(first[k], second[k]);
      }
    } catch (e_5_1) {
      e_5 = { error: e_5_1 };
    } finally {
      try {
        if (sharedKeys_1_1 && !sharedKeys_1_1.done && (_a = sharedKeys_1.return))
          _a.call(sharedKeys_1);
      } finally {
        if (e_5)
          throw e_5.error;
      }
    }
    return __assign(__assign(__assign({}, first), second), sharedShape);
  };
})(objectUtil || (objectUtil = {}));
var mergeObjects = function(first) {
  return function(second) {
    var mergedShape = objectUtil.mergeShapes(first._def.shape(), second._def.shape());
    var merged = new ZodObject({
      unknownKeys: first._def.unknownKeys,
      catchall: first._def.catchall,
      shape: function() {
        return mergedShape;
      }
    });
    return merged;
  };
};
var AugmentFactory = function(def) {
  return function(augmentation) {
    return new ZodObject(__assign(__assign({}, def), { shape: function() {
      return __assign(__assign({}, def.shape()), augmentation);
    } }));
  };
};
var ZodObject = function(_super) {
  __extends(ZodObject2, _super);
  function ZodObject2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.strict = function() {
      return new ZodObject2(__assign(__assign({}, _this._def), { unknownKeys: "strict" }));
    };
    _this.strip = function() {
      return new ZodObject2(__assign(__assign({}, _this._def), { unknownKeys: "strip" }));
    };
    _this.passthrough = function() {
      return new ZodObject2(__assign(__assign({}, _this._def), { unknownKeys: "passthrough" }));
    };
    _this.nonstrict = _this.passthrough;
    _this.augment = AugmentFactory(_this._def);
    _this.extend = AugmentFactory(_this._def);
    _this.setKey = function(key, schema) {
      var _a;
      return _this.augment((_a = {}, _a[key] = schema, _a));
    };
    _this.merge = function(merging) {
      var mergedShape = objectUtil.mergeShapes(_this._def.shape(), merging._def.shape());
      var merged = new ZodObject2({
        unknownKeys: merging._def.unknownKeys,
        catchall: merging._def.catchall,
        shape: function() {
          return mergedShape;
        }
      });
      return merged;
    };
    _this.catchall = function(index) {
      return new ZodObject2(__assign(__assign({}, _this._def), { catchall: index }));
    };
    _this.pick = function(mask) {
      var shape = {};
      Object.keys(mask).map(function(key) {
        shape[key] = _this.shape[key];
      });
      return new ZodObject2(__assign(__assign({}, _this._def), { shape: function() {
        return shape;
      } }));
    };
    _this.omit = function(mask) {
      var shape = {};
      Object.keys(_this.shape).map(function(key) {
        if (Object.keys(mask).indexOf(key) === -1) {
          shape[key] = _this.shape[key];
        }
      });
      return new ZodObject2(__assign(__assign({}, _this._def), { shape: function() {
        return shape;
      } }));
    };
    _this.partial = function() {
      var newShape = {};
      for (var key in _this.shape) {
        var fieldSchema = _this.shape[key];
        newShape[key] = fieldSchema.isOptional() ? fieldSchema : fieldSchema.optional();
      }
      return new ZodObject2(__assign(__assign({}, _this._def), { shape: function() {
        return newShape;
      } }));
    };
    _this.deepPartial = function() {
      var newShape = {};
      for (var key in _this.shape) {
        var fieldSchema = _this.shape[key];
        if (fieldSchema instanceof ZodObject2) {
          newShape[key] = fieldSchema.isOptional() ? fieldSchema : fieldSchema.deepPartial().optional();
        } else {
          newShape[key] = fieldSchema.isOptional() ? fieldSchema : fieldSchema.optional();
        }
      }
      return new ZodObject2(__assign(__assign({}, _this._def), { shape: function() {
        return newShape;
      } }));
    };
    _this.required = function() {
      var newShape = {};
      for (var key in _this.shape) {
        var fieldSchema = _this.shape[key];
        var newField = fieldSchema;
        while (newField instanceof ZodOptional) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
      return new ZodObject2(__assign(__assign({}, _this._def), { shape: function() {
        return newShape;
      } }));
    };
    return _this;
  }
  ZodObject2.prototype._parse = function(ctx) {
    var e_6, _a, e_7, _b, e_8, _c;
    var _this = this;
    if (ctx.parsedType !== ZodParsedType.object) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return;
    }
    var objectPromises = {};
    var shape = this._def.shape();
    var shapeKeys = Object.keys(shape);
    var dataKeys = Object.keys(ctx.data);
    var extraKeys = dataKeys.filter(function(k) {
      return shapeKeys.indexOf(k) === -1;
    });
    var _loop_1 = function(key2) {
      var keyValidator = shapeKeys.includes(key2) ? shape[key2] : !(this_1._def.catchall instanceof ZodNever) ? this_1._def.catchall : void 0;
      if (!keyValidator) {
        return "continue";
      }
      if (typeof ctx.data[key2] === "undefined" && !dataKeys.includes(key2)) {
        objectPromises[key2] = new PseudoPromise().then(function() {
          return keyValidator._parseWithInvalidFallback(void 0, __assign(__assign({}, ctx), { path: __spreadArray(__spreadArray([], __read(ctx.path)), [key2]), parentError: ctx.currentError }));
        }).then(function(data) {
          if (data === void 0) {
            return NOSET;
          } else {
            return data;
          }
        });
        return "continue";
      }
      objectPromises[key2] = new PseudoPromise().then(function() {
        return keyValidator._parseWithInvalidFallback(ctx.data[key2], __assign(__assign({}, ctx), { path: __spreadArray(__spreadArray([], __read(ctx.path)), [key2]), parentError: ctx.currentError }));
      }).then(function(data) {
        return data;
      });
    };
    var this_1 = this;
    try {
      for (var shapeKeys_1 = __values(shapeKeys), shapeKeys_1_1 = shapeKeys_1.next(); !shapeKeys_1_1.done; shapeKeys_1_1 = shapeKeys_1.next()) {
        var key = shapeKeys_1_1.value;
        _loop_1(key);
      }
    } catch (e_6_1) {
      e_6 = { error: e_6_1 };
    } finally {
      try {
        if (shapeKeys_1_1 && !shapeKeys_1_1.done && (_a = shapeKeys_1.return))
          _a.call(shapeKeys_1);
      } finally {
        if (e_6)
          throw e_6.error;
      }
    }
    if (this._def.catchall instanceof ZodNever) {
      var unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        try {
          for (var extraKeys_1 = __values(extraKeys), extraKeys_1_1 = extraKeys_1.next(); !extraKeys_1_1.done; extraKeys_1_1 = extraKeys_1.next()) {
            var key = extraKeys_1_1.value;
            objectPromises[key] = PseudoPromise.resolve(ctx.data[key]);
          }
        } catch (e_7_1) {
          e_7 = { error: e_7_1 };
        } finally {
          try {
            if (extraKeys_1_1 && !extraKeys_1_1.done && (_b = extraKeys_1.return))
              _b.call(extraKeys_1);
          } finally {
            if (e_7)
              throw e_7.error;
          }
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          ctx.addIssue({
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
        }
      } else if (unknownKeys === "strip")
        ;
      else {
        throw new Error("Internal ZodObject error: invalid unknownKeys value.");
      }
    } else {
      var _loop_2 = function(key2) {
        objectPromises[key2] = new PseudoPromise().then(function() {
          var parsedValue = _this._def.catchall._parseWithInvalidFallback(ctx.data[key2], __assign(__assign({}, ctx), { path: __spreadArray(__spreadArray([], __read(ctx.path)), [key2]), parentError: ctx.currentError }));
          return parsedValue;
        });
      };
      try {
        for (var extraKeys_2 = __values(extraKeys), extraKeys_2_1 = extraKeys_2.next(); !extraKeys_2_1.done; extraKeys_2_1 = extraKeys_2.next()) {
          var key = extraKeys_2_1.value;
          _loop_2(key);
        }
      } catch (e_8_1) {
        e_8 = { error: e_8_1 };
      } finally {
        try {
          if (extraKeys_2_1 && !extraKeys_2_1.done && (_c = extraKeys_2.return))
            _c.call(extraKeys_2);
        } finally {
          if (e_8)
            throw e_8.error;
        }
      }
    }
    return PseudoPromise.object(objectPromises).then(function(data) {
      return data;
    });
  };
  Object.defineProperty(ZodObject2.prototype, "shape", {
    get: function() {
      return this._def.shape();
    },
    enumerable: false,
    configurable: true
  });
  ZodObject2.create = function(shape) {
    return new ZodObject2({
      shape: function() {
        return shape;
      },
      unknownKeys: "strip",
      catchall: ZodNever.create()
    });
  };
  ZodObject2.strictCreate = function(shape) {
    return new ZodObject2({
      shape: function() {
        return shape;
      },
      unknownKeys: "strict",
      catchall: ZodNever.create()
    });
  };
  ZodObject2.lazycreate = function(shape) {
    return new ZodObject2({
      shape,
      unknownKeys: "strip",
      catchall: ZodNever.create()
    });
  };
  return ZodObject2;
}(ZodType);
var ZodUnion = function(_super) {
  __extends(ZodUnion2, _super);
  function ZodUnion2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodUnion2.prototype._parse = function(ctx) {
    var unionErrors = __spreadArray([], __read(Array(this._def.options.length))).map(function() {
      return new ZodError([]);
    });
    return PseudoPromise.all(this._def.options.map(function(opt, _j) {
      return new PseudoPromise().then(function() {
        return opt._parseWithInvalidFallback(ctx.data, __assign(__assign({}, ctx), { parentError: unionErrors[_j] }));
      });
    })).then(function(unionResults) {
      var isValid = !!unionErrors.find(function(err) {
        return err.isEmpty;
      });
      if (!isValid) {
        {
          ctx.addIssue({
            code: ZodIssueCode.invalid_union,
            unionErrors
          });
        }
      }
      return unionResults;
    }).then(function(unionResults) {
      var validIndex = unionErrors.indexOf(unionErrors.find(function(err) {
        return err.isEmpty;
      }));
      return unionResults[validIndex];
    });
  };
  Object.defineProperty(ZodUnion2.prototype, "options", {
    get: function() {
      return this._def.options;
    },
    enumerable: false,
    configurable: true
  });
  ZodUnion2.create = function(types) {
    return new ZodUnion2({
      options: types
    });
  };
  return ZodUnion2;
}(ZodType);
var ZodIntersection = function(_super) {
  __extends(ZodIntersection2, _super);
  function ZodIntersection2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodIntersection2.prototype._parse = function(ctx) {
    var _this = this;
    return PseudoPromise.all([
      new PseudoPromise().then(function() {
        return _this._def.left._parseWithInvalidFallback(ctx.data, __assign(__assign({}, ctx), { parentError: ctx.currentError }));
      }),
      new PseudoPromise().then(function() {
        return _this._def.right._parseWithInvalidFallback(ctx.data, __assign(__assign({}, ctx), { parentError: ctx.currentError }));
      })
    ]).then(function(_a) {
      var _b = __read(_a, 2), parsedLeft = _b[0], parsedRight = _b[1];
      if (parsedLeft === INVALID || parsedRight === INVALID)
        return INVALID;
      var parsedLeftType = getParsedType(parsedLeft);
      var parsedRightType = getParsedType(parsedRight);
      if (parsedLeft === parsedRight) {
        return parsedLeft;
      } else if (parsedLeftType === ZodParsedType.object && parsedRightType === ZodParsedType.object) {
        return __assign(__assign({}, parsedLeft), parsedRight);
      } else {
        ctx.addIssue({
          code: ZodIssueCode.invalid_intersection_types
        });
      }
    });
  };
  ZodIntersection2.create = function(left, right) {
    return new ZodIntersection2({
      left,
      right
    });
  };
  return ZodIntersection2;
}(ZodType);
var ZodTuple = function(_super) {
  __extends(ZodTuple2, _super);
  function ZodTuple2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodTuple2.prototype._parse = function(ctx) {
    var _this = this;
    if (ctx.parsedType !== ZodParsedType.array) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return;
    }
    if (ctx.data.length > this._def.items.length) {
      ctx.addIssue({
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        type: "array"
      });
    } else if (ctx.data.length < this._def.items.length) {
      ctx.addIssue({
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        type: "array"
      });
    }
    var tupleData = ctx.data;
    return PseudoPromise.all(tupleData.map(function(item, index) {
      var itemParser = _this._def.items[index];
      if (!itemParser) {
        return PseudoPromise.resolve(item);
      }
      return new PseudoPromise().then(function() {
        return itemParser._parseWithInvalidFallback(item, __assign(__assign({}, ctx), { path: __spreadArray(__spreadArray([], __read(ctx.path)), [index]), parentError: ctx.currentError }));
      }).then(function(tupleItem) {
        return tupleItem;
      });
    }));
  };
  Object.defineProperty(ZodTuple2.prototype, "items", {
    get: function() {
      return this._def.items;
    },
    enumerable: false,
    configurable: true
  });
  ZodTuple2.create = function(schemas) {
    return new ZodTuple2({
      items: schemas
    });
  };
  return ZodTuple2;
}(ZodType);
var ZodRecord = function(_super) {
  __extends(ZodRecord2, _super);
  function ZodRecord2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodRecord2.prototype._parse = function(ctx) {
    var _this = this;
    if (ctx.parsedType !== ZodParsedType.object) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return;
    }
    var parsedRecordPromises = {};
    var _loop_3 = function(key2) {
      parsedRecordPromises[key2] = new PseudoPromise().then(function() {
        return _this._def.valueType._parseWithInvalidFallback(ctx.data[key2], __assign(__assign({}, ctx), { path: __spreadArray(__spreadArray([], __read(ctx.path)), [key2]), parentError: ctx.currentError }));
      });
    };
    for (var key in ctx.data) {
      _loop_3(key);
    }
    return PseudoPromise.object(parsedRecordPromises);
  };
  ZodRecord2.create = function(valueType) {
    return new ZodRecord2({
      valueType
    });
  };
  return ZodRecord2;
}(ZodType);
var ZodMap = function(_super) {
  __extends(ZodMap2, _super);
  function ZodMap2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodMap2.prototype._parse = function(ctx) {
    var _this = this;
    if (ctx.parsedType !== ZodParsedType.map) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return;
    }
    var dataMap = ctx.data;
    var returnedMap = new Map();
    return PseudoPromise.all(__spreadArray([], __read(dataMap.entries())).map(function(_a, index) {
      var _b = __read(_a, 2), key = _b[0], value = _b[1];
      return PseudoPromise.all([
        new PseudoPromise().then(function() {
          return _this._def.keyType._parseWithInvalidFallback(key, __assign(__assign({}, ctx), { path: __spreadArray(__spreadArray([], __read(ctx.path)), [index, "key"]), parentError: ctx.currentError }));
        }),
        new PseudoPromise().then(function() {
          var mapValue = _this._def.valueType._parseWithInvalidFallback(value, __assign(__assign({}, ctx), { path: __spreadArray(__spreadArray([], __read(ctx.path)), [index, "value"]), parentError: ctx.currentError }));
          return mapValue;
        })
      ]).then(function(item) {
        returnedMap.set(item[0], item[1]);
      });
    })).then(function() {
      return returnedMap;
    });
  };
  ZodMap2.create = function(keyType, valueType) {
    return new ZodMap2({
      valueType,
      keyType
    });
  };
  return ZodMap2;
}(ZodType);
var ZodSet = function(_super) {
  __extends(ZodSet2, _super);
  function ZodSet2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodSet2.prototype._parse = function(ctx) {
    var _this = this;
    if (ctx.parsedType !== ZodParsedType.set) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return;
    }
    var dataSet = ctx.data;
    var returnedSet = new Set();
    return PseudoPromise.all(__spreadArray([], __read(dataSet.values())).map(function(item, i) {
      return new PseudoPromise().then(function() {
        return _this._def.valueType._parseWithInvalidFallback(item, __assign(__assign({}, ctx), { path: __spreadArray(__spreadArray([], __read(ctx.path)), [i]), parentError: ctx.currentError }));
      }).then(function(item2) {
        returnedSet.add(item2);
      });
    })).then(function() {
      return returnedSet;
    });
  };
  ZodSet2.create = function(valueType) {
    return new ZodSet2({
      valueType
    });
  };
  return ZodSet2;
}(ZodType);
var ZodFunction = function(_super) {
  __extends(ZodFunction2, _super);
  function ZodFunction2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.args = function() {
      var items = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        items[_i] = arguments[_i];
      }
      return new ZodFunction2(__assign(__assign({}, _this._def), { args: ZodTuple.create(items) }));
    };
    _this.returns = function(returnType) {
      return new ZodFunction2(__assign(__assign({}, _this._def), { returns: returnType }));
    };
    _this.implement = function(func) {
      var validatedFunc = _this.parse(func);
      return validatedFunc;
    };
    _this.strictImplement = function(func) {
      var validatedFunc = _this.parse(func);
      return validatedFunc;
    };
    _this.validate = _this.implement;
    return _this;
  }
  ZodFunction2.prototype._parse = function(ctx) {
    var _this = this;
    if (ctx.parsedType !== ZodParsedType.function) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return;
    }
    var isAsyncFunction = this._def.returns instanceof ZodPromise;
    var validatedFunction = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var argsError = new ZodError([]);
      var returnsError = new ZodError([]);
      var internalProm = new PseudoPromise().then(function() {
        return _this._def.args._parseWithInvalidFallback(args, __assign(__assign({}, ctx), { parentError: argsError, async: isAsyncFunction }));
      }).then(function(args2) {
        if (!argsError.isEmpty) {
          var newError = new ZodError([]);
          var issue = ctx.makeIssue({
            code: ZodIssueCode.invalid_arguments,
            argumentsError: argsError
          });
          newError.addIssue(issue);
          throw newError;
        }
        return args2;
      }).then(function(args2) {
        return ctx.data.apply(ctx, __spreadArray([], __read(args2)));
      }).then(function(result) {
        return _this._def.returns._parseWithInvalidFallback(result, __assign(__assign({}, ctx), { parentError: returnsError, async: isAsyncFunction }));
      }).then(function(result) {
        if (!returnsError.isEmpty) {
          var newError = new ZodError([]);
          var issue = ctx.makeIssue({
            code: ZodIssueCode.invalid_return_type,
            returnTypeError: returnsError
          });
          newError.addIssue(issue);
          throw newError;
        }
        return result;
      });
      if (isAsyncFunction) {
        return internalProm.getValueAsync();
      } else {
        return internalProm.getValueSync();
      }
    };
    return validatedFunction;
  };
  ZodFunction2.prototype.parameters = function() {
    return this._def.args;
  };
  ZodFunction2.prototype.returnType = function() {
    return this._def.returns;
  };
  ZodFunction2.create = function(args, returns) {
    return new ZodFunction2({
      args: args || ZodTuple.create([]),
      returns: returns || ZodUnknown.create()
    });
  };
  return ZodFunction2;
}(ZodType);
var ZodLazy = function(_super) {
  __extends(ZodLazy2, _super);
  function ZodLazy2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(ZodLazy2.prototype, "schema", {
    get: function() {
      return this._def.getter();
    },
    enumerable: false,
    configurable: true
  });
  ZodLazy2.prototype._parse = function(ctx) {
    var lazySchema = this._def.getter();
    return PseudoPromise.resolve(lazySchema._parseWithInvalidFallback(ctx.data, __assign(__assign({}, ctx), { parentError: ctx.currentError })));
  };
  ZodLazy2.create = function(getter) {
    return new ZodLazy2({
      getter
    });
  };
  return ZodLazy2;
}(ZodType);
var ZodLiteral = function(_super) {
  __extends(ZodLiteral2, _super);
  function ZodLiteral2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodLiteral2.prototype._parse = function(ctx) {
    if (ctx.data !== this._def.value) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_type,
        expected: this._def.value,
        received: ctx.data
      });
      return;
    }
    return ctx.data;
  };
  ZodLiteral2.create = function(value) {
    return new ZodLiteral2({
      value
    });
  };
  return ZodLiteral2;
}(ZodType);
var ZodEnum = function(_super) {
  __extends(ZodEnum2, _super);
  function ZodEnum2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodEnum2.prototype._parse = function(ctx) {
    if (this._def.values.indexOf(ctx.data) === -1) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_enum_value,
        options: this._def.values
      });
      return;
    }
    return ctx.data;
  };
  Object.defineProperty(ZodEnum2.prototype, "options", {
    get: function() {
      return this._def.values;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ZodEnum2.prototype, "enum", {
    get: function() {
      var e_9, _a;
      var enumValues = {};
      try {
        for (var _b = __values(this._def.values), _c = _b.next(); !_c.done; _c = _b.next()) {
          var val = _c.value;
          enumValues[val] = val;
        }
      } catch (e_9_1) {
        e_9 = { error: e_9_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_9)
            throw e_9.error;
        }
      }
      return enumValues;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ZodEnum2.prototype, "Values", {
    get: function() {
      var e_10, _a;
      var enumValues = {};
      try {
        for (var _b = __values(this._def.values), _c = _b.next(); !_c.done; _c = _b.next()) {
          var val = _c.value;
          enumValues[val] = val;
        }
      } catch (e_10_1) {
        e_10 = { error: e_10_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_10)
            throw e_10.error;
        }
      }
      return enumValues;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ZodEnum2.prototype, "Enum", {
    get: function() {
      var e_11, _a;
      var enumValues = {};
      try {
        for (var _b = __values(this._def.values), _c = _b.next(); !_c.done; _c = _b.next()) {
          var val = _c.value;
          enumValues[val] = val;
        }
      } catch (e_11_1) {
        e_11 = { error: e_11_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_11)
            throw e_11.error;
        }
      }
      return enumValues;
    },
    enumerable: false,
    configurable: true
  });
  ZodEnum2.create = function(values) {
    return new ZodEnum2({
      values
    });
  };
  return ZodEnum2;
}(ZodType);
var ZodNativeEnum = function(_super) {
  __extends(ZodNativeEnum2, _super);
  function ZodNativeEnum2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodNativeEnum2.prototype._parse = function(ctx) {
    var nativeEnumValues = util.getValidEnumValues(this._def.values);
    if (nativeEnumValues.indexOf(ctx.data) === -1) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_enum_value,
        options: util.objectValues(nativeEnumValues)
      });
      return;
    }
    return ctx.data;
  };
  ZodNativeEnum2.create = function(values) {
    return new ZodNativeEnum2({
      values
    });
  };
  return ZodNativeEnum2;
}(ZodType);
var ZodPromise = function(_super) {
  __extends(ZodPromise2, _super);
  function ZodPromise2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodPromise2.prototype._parse = function(ctx) {
    var _this = this;
    if (ctx.parsedType !== ZodParsedType.promise && ctx.async === false) {
      ctx.addIssue({
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return;
    }
    var promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    var promiseError = new ZodError([]);
    return PseudoPromise.resolve(promisified.then(function(data) {
      var value = _this._def.type._parseWithInvalidFallback(data, __assign(__assign({}, ctx), { parentError: promiseError }));
      return value;
    }).then(function(data) {
      if (!promiseError.isEmpty) {
        throw promiseError;
      }
      return data;
    }));
  };
  ZodPromise2.create = function(schema) {
    return new ZodPromise2({
      type: schema
    });
  };
  return ZodPromise2;
}(ZodType);
var ZodEffects = function(_super) {
  __extends(ZodEffects2, _super);
  function ZodEffects2(def) {
    return _super.call(this, def) || this;
  }
  ZodEffects2.prototype.innerType = function() {
    return this._def.schema;
  };
  ZodEffects2.prototype._parse = function(ctx) {
    var e_12, _a;
    var _this = this;
    var isSync = ctx.async === false || this instanceof ZodPromise;
    var effects = this._def.effects || [];
    var checkCtx = {
      addIssue: function(arg) {
        ctx.addIssue(arg);
      },
      path: ctx.path
    };
    var THROW_ERROR_IF_PRESENT = function(key) {
      return function(data) {
        if (!ctx.currentError.isEmpty)
          throw ctx.currentError;
        return data;
      };
    };
    var finalPromise = new PseudoPromise().then(function() {
      return _this._def.schema._parseWithInvalidFallback(ctx.data, __assign(__assign({}, ctx), { parentError: ctx.currentError }));
    }).then(THROW_ERROR_IF_PRESENT());
    var _loop_4 = function(effect2) {
      if (effect2.type === "refinement") {
        finalPromise = finalPromise.all(function(data) {
          return [
            PseudoPromise.resolve(data),
            PseudoPromise.resolve(data).then(function() {
              var result = effect2.refinement(data, checkCtx);
              if (isSync && result instanceof Promise)
                throw new Error("You can't use .parse() on a schema containing async refinements. Use .parseAsync instead.");
              return result;
            })
          ];
        }).then(function(_a2) {
          var _b = __read(_a2, 2), data = _b[0];
          _b[1];
          return data;
        });
      } else if (effect2.type === "transform") {
        finalPromise = finalPromise.then(THROW_ERROR_IF_PRESENT()).then(function(data) {
          if (!(_this instanceof ZodEffects2))
            throw new Error("Only transformers can contain transformation functions.");
          var newData = effect2.transform(data);
          return newData;
        }).then(function(data) {
          if (isSync && data instanceof Promise) {
            throw new Error("You can't use .parse() on a schema containing async transformations. Use .parseAsync instead.");
          }
          return data;
        });
      } else {
        throw new Error("Invalid effect type.");
      }
    };
    try {
      for (var effects_1 = __values(effects), effects_1_1 = effects_1.next(); !effects_1_1.done; effects_1_1 = effects_1.next()) {
        var effect = effects_1_1.value;
        _loop_4(effect);
      }
    } catch (e_12_1) {
      e_12 = { error: e_12_1 };
    } finally {
      try {
        if (effects_1_1 && !effects_1_1.done && (_a = effects_1.return))
          _a.call(effects_1);
      } finally {
        if (e_12)
          throw e_12.error;
      }
    }
    return finalPromise;
  };
  ZodEffects2.create = function(schema) {
    var newTx = new ZodEffects2({
      schema
    });
    return newTx;
  };
  return ZodEffects2;
}(ZodType);
var ZodOptional = function(_super) {
  __extends(ZodOptional2, _super);
  function ZodOptional2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodOptional2.prototype._parse = function(ctx) {
    var _this = this;
    var data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      return void 0;
    }
    return new PseudoPromise().then(function() {
      return _this._def.innerType._parseWithInvalidFallback(data, __assign(__assign({}, ctx), { parentError: ctx.currentError }));
    });
  };
  ZodOptional2.prototype.unwrap = function() {
    return this._def.innerType;
  };
  ZodOptional2.create = function(type) {
    return new ZodOptional2({
      innerType: type
    });
  };
  return ZodOptional2;
}(ZodType);
var ZodNullable = function(_super) {
  __extends(ZodNullable2, _super);
  function ZodNullable2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodNullable2.prototype._parse = function(ctx) {
    var _this = this;
    if (ctx.parsedType === ZodParsedType.null) {
      return null;
    }
    return new PseudoPromise().then(function() {
      return _this._def.innerType._parseWithInvalidFallback(ctx.data, __assign(__assign({}, ctx), { parentError: ctx.currentError }));
    });
  };
  ZodNullable2.prototype.unwrap = function() {
    return this._def.innerType;
  };
  ZodNullable2.create = function(type) {
    return new ZodNullable2({
      innerType: type
    });
  };
  return ZodNullable2;
}(ZodType);
var ZodDefault = function(_super) {
  __extends(ZodDefault2, _super);
  function ZodDefault2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ZodDefault2.prototype._parse = function(ctx) {
    var _this = this;
    var data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return new PseudoPromise().then(function() {
      return _this._def.innerType._parseWithInvalidFallback(data, __assign(__assign({}, ctx), { parentError: ctx.currentError }));
    });
  };
  ZodDefault2.prototype.removeDefault = function() {
    return this._def.innerType;
  };
  ZodDefault2.create = function(type) {
    return new ZodOptional({
      innerType: type
    });
  };
  return ZodDefault2;
}(ZodType);
var custom = function(check, params) {
  if (check)
    return ZodAny.create().refine(check, params);
  return ZodAny.create();
};
var late = {
  object: ZodObject.lazycreate
};
var instanceOfType = function(cls, params) {
  if (params === void 0) {
    params = {
      message: "Input not instance of " + cls.name
    };
  }
  return custom(function(data) {
    return data instanceof cls;
  }, params);
};
var stringType = ZodString.create;
var numberType = ZodNumber.create;
var bigIntType = ZodBigInt.create;
var booleanType = ZodBoolean.create;
var dateType = ZodDate.create;
var undefinedType = ZodUndefined.create;
var nullType = ZodNull.create;
var anyType = ZodAny.create;
var unknownType = ZodUnknown.create;
var neverType = ZodNever.create;
var voidType = ZodVoid.create;
var arrayType = ZodArray.create;
var objectType = ZodObject.create;
var strictObjectType = ZodObject.strictCreate;
var unionType = ZodUnion.create;
var intersectionType = ZodIntersection.create;
var tupleType = ZodTuple.create;
var recordType = ZodRecord.create;
var mapType = ZodMap.create;
var setType = ZodSet.create;
var functionType = ZodFunction.create;
var lazyType = ZodLazy.create;
var literalType = ZodLiteral.create;
var enumType = ZodEnum.create;
var nativeEnumType = ZodNativeEnum.create;
var promiseType = ZodPromise.create;
var effectsType = ZodEffects.create;
var optionalType = ZodOptional.create;
var nullableType = ZodNullable.create;
var ostring = function() {
  return stringType().optional();
};
var onumber = function() {
  return numberType().optional();
};
var oboolean = function() {
  return booleanType().optional();
};
var external = Object.freeze({
  __proto__: null,
  ZodParsedType,
  getParsedType,
  issueHelpers,
  ZodType,
  ZodString,
  ZodNumber,
  ZodBigInt,
  ZodBoolean,
  ZodDate,
  ZodUndefined,
  ZodNull,
  ZodAny,
  ZodUnknown,
  ZodNever,
  ZodVoid,
  ZodArray,
  ZodNonEmptyArray,
  get objectUtil() {
    return objectUtil;
  },
  mergeObjects,
  ZodObject,
  ZodUnion,
  ZodIntersection,
  ZodTuple,
  ZodRecord,
  ZodMap,
  ZodSet,
  ZodFunction,
  ZodLazy,
  ZodLiteral,
  ZodEnum,
  ZodNativeEnum,
  ZodPromise,
  ZodEffects,
  ZodTransformer: ZodEffects,
  ZodOptional,
  ZodNullable,
  ZodDefault,
  custom,
  Schema: ZodType,
  ZodSchema: ZodType,
  late,
  any: anyType,
  array: arrayType,
  bigint: bigIntType,
  boolean: booleanType,
  date: dateType,
  effect: effectsType,
  "enum": enumType,
  "function": functionType,
  "instanceof": instanceOfType,
  intersection: intersectionType,
  lazy: lazyType,
  literal: literalType,
  map: mapType,
  nativeEnum: nativeEnumType,
  never: neverType,
  "null": nullType,
  nullable: nullableType,
  number: numberType,
  object: objectType,
  oboolean,
  onumber,
  optional: optionalType,
  ostring,
  promise: promiseType,
  record: recordType,
  set: setType,
  strictObject: strictObjectType,
  string: stringType,
  transformer: effectsType,
  tuple: tupleType,
  "undefined": undefinedType,
  union: unionType,
  unknown: unknownType,
  "void": voidType,
  ZodIssueCode,
  quotelessJson,
  ZodError,
  defaultErrorMap,
  get overrideErrorMap() {
    return overrideErrorMap;
  },
  setErrorMap
});
export {
  ZodType as Schema,
  ZodAny,
  ZodArray,
  ZodBigInt,
  ZodBoolean,
  ZodDate,
  ZodDefault,
  ZodEffects,
  ZodEnum,
  ZodError,
  ZodFunction,
  ZodIntersection,
  ZodIssueCode,
  ZodLazy,
  ZodLiteral,
  ZodMap,
  ZodNativeEnum,
  ZodNever,
  ZodNonEmptyArray,
  ZodNull,
  ZodNullable,
  ZodNumber,
  ZodObject,
  ZodOptional,
  ZodParsedType,
  ZodPromise,
  ZodRecord,
  ZodType as ZodSchema,
  ZodSet,
  ZodString,
  ZodEffects as ZodTransformer,
  ZodTuple,
  ZodType,
  ZodUndefined,
  ZodUnion,
  ZodUnknown,
  ZodVoid,
  anyType as any,
  arrayType as array,
  bigIntType as bigint,
  booleanType as boolean,
  custom,
  dateType as date,
  defaultErrorMap,
  effectsType as effect,
  enumType as enum,
  functionType as function,
  getParsedType,
  instanceOfType as instanceof,
  intersectionType as intersection,
  issueHelpers,
  late,
  lazyType as lazy,
  literalType as literal,
  mapType as map,
  mergeObjects,
  nativeEnumType as nativeEnum,
  neverType as never,
  nullType as null,
  nullableType as nullable,
  numberType as number,
  objectType as object,
  objectUtil,
  oboolean,
  onumber,
  optionalType as optional,
  ostring,
  overrideErrorMap,
  promiseType as promise,
  quotelessJson,
  recordType as record,
  setType as set,
  setErrorMap,
  strictObjectType as strictObject,
  stringType as string,
  effectsType as transformer,
  tupleType as tuple,
  undefinedType as undefined,
  unionType as union,
  unknownType as unknown,
  voidType as void,
  external as z
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
//# sourceMappingURL=zod.js.map
